{
  "layout": "panel",
  "rdbmsId": "da8c7683-f164-40eb-8333-f80b6d5db285",
  "hidden": true,
  "engine": "EnterpriseArchitecture",
  "insightName": "Multiple System Coverage Report - 0",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"core_engine\":\"EnterpriseArchitecture\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"param\" , \"\u003cencode\u003e{\"json\":[{\"label\":\"Multiple System Coverage of Selected Parameter\",\"description\":\"Select a group of systems to see collective coverage of functions\",\"query\":\"CreateFrame ( grid ) .as ( [ \u0027FRAME518771\u0027 ] ) ;Database ( EnterpriseArchitecture ) | Select ( \u003cmetaDataType\u003eParent , \u003cmetaDataType\u003eParent__TotalLeafs , \u003cmetaDataType\u003e , System, System__\u003cmetaDataType\u003eMainGroup, \u003cmetaDataType\u003eParent__Level) .as ( [ \u003cmetaDataType\u003eParent , TotalLeafs , \u003cmetaDataType\u003e , System, MainGroup, Level] ) | Filter ( System__\u003cmetaDataType\u003eMainGroup \u003d\u003d [ \u0027\u003cMainGroup\u003e\u0027 ] ) | Filter ( \u003cmetaDataType\u003eParent__Level \u003d\u003d [ 3 ] ) | Join (( \u003cmetaDataType\u003eParent , inner.join , \u003cmetaDataType\u003e ) , ( System , inner.join , \u003cmetaDataType\u003e ) ) | Import ( ); Panel ( 0 ) | SetPanelView (\u0027visualization\u0027 ); Select ( \u003cmetaDataType\u003eParent , 100 * ( UniqueCount ( \u003cmetaDataType\u003e ) ) / TotalLeafs, ( UniqueCount ( \u003cmetaDataType\u003e ) ) ) .as ( [ \u003cmetaDataType\u003eParent , TotalCoverage, AlignmentCount ] ) | Group ( \u003cmetaDataType\u003eParent ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00270\u0027 : { \u0027layout\u0027 : \u0027Grid\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027\u003cmetaDataType\u003eParent\u0027 , \u0027TotalCoverage\u0027, \u0027AlignmentCount\u0027 ] } } } ) | Collect ( 500 ) ; Panel ( 0 ) | RetrievePanelOrnaments ( \\\"tools.shared.gridFullWidth\\\" ); Panel ( 0 ) | SetPanelLabel ( \\\"Coverage Percentages\\\" ) ;  Panel ( 0 ) | Clone ( 1 ) ;Select ( \u003cmetaDataType\u003eParent , 100 * ( UniqueCount ( \u003cmetaDataType\u003e ) ) / TotalLeafs ) .as ( [ \u003cmetaDataType\u003eParent , TotalCoverage ] ) | Group ( \u003cmetaDataType\u003eParent ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00271\u0027 : { \u0027layout\u0027 : \u0027Column\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027\u003cmetaDataType\u003eParent\u0027 ] , \u0027value\u0027 : [ \u0027TotalCoverage\u0027 ] } } } ) | Collect ( 500 );  Panel ( 1 ) | SetPanelSort ( cols \u003d [ \u0027TotalCoverage\u0027 ] , dirs \u003d [ \u0027desc\u0027 ] ); Select ( \u003cmetaDataType\u003eParent , 100 * ( UniqueCount ( \u003cmetaDataType\u003e ) ) / TotalLeafs ) .as ( [ \u003cmetaDataType\u003eParent , TotalCoverage ] ) | Group ( \u003cmetaDataType\u003eParent ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00271\u0027 : { \u0027layout\u0027 : \u0027Column\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027\u003cmetaDataType\u003eParent\u0027 ] , \u0027value\u0027 : [ \u0027TotalCoverage\u0027 ] } } } ) | Collect ( 500 ); Panel ( 1 ) | SetPanelLabel ( \\\"Coverage Percentage Distributions\\\" ); Panel ( 0 ) | Clone ( 2 );  Panel ( 2 ) | SetPanelView (\u0027visualization\u0027 ); Select ( System , \u003cmetaDataType\u003e, \u003cmetaDataType\u003eParent ) .as ( [ System, \u003cmetaDataType\u003e, \u003cmetaDataType\u003eParent] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00272\u0027 : { \u0027layout\u0027 : \u0027Grid\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027System\u0027, \u0027\u003cmetaDataType\u003e\u0027,\u0027\u003cmetaDataType\u003eParent\u0027] } } } ) | Collect ( 500 ); Panel ( 2 ) | SetPanelLabel ( \\\"System Alignments\\\" ); Panel ( 0 ) | Clone ( 3 ) ;Select ( \u003cmetaDataType\u003e, UniqueCount(System)) .as ( [ \u003cmetaDataType\u003e, UniqueCountofSystem ] ) | Group ( \u003cmetaDataType\u003e) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00273\u0027 : { \u0027layout\u0027 : \u0027Column\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027\u003cmetaDataType\u003e\u0027 ] , \u0027value\u0027 : [ \u0027UniqueCountofSystem\u0027 ] } } } ) | Collect ( 500 ); Panel ( 3 ) | SetPanelLabel ( \\\"Redundancy Counts\\\" );\",\"params\":[{\"paramName\":\"search\",\"view\":false,\"model\":{\"defaultValue\":\"\"}},{\"paramName\":\"metaDataType\",\"view\":{\"displayType\":\"dropdown\",\"label\":\"Metadata Type\",\"description\":\"Select the metadata parameter of interest\"},\"model\":{\"defaultOptions\":[\"System_Function\",\"Operational_Activity\",\"Capability\"],\"defaultValue\":\"Operational_Activity\"},\"required\":true},{\"paramName\":\"MainGroup\",\"required\":true,\"view\":{\"displayType\":\"dropdown\",\"label\":\"Select a group\",\"description\":\"Select a group\",\"attributes\":{\"searchable\":true}},\"model\":{\"dependsOn\":[\"metaDataType\"],\"defaultValue\":\"Capability\",\"query\":\"Database(EnterpriseArchitecture) | Select(System__\u003cmetaDataType\u003eMainGroup) | Collect(-1);\"}}],\"execute\":\"button\"}]}\u003c/encode\u003e\" ) ;CreateFrame ( grid ) .as ( [ \u0027FRAME518771\u0027 ] ) ;Database ( EnterpriseArchitecture ) | Select ( Operational_ActivityParent , Operational_ActivityParent__TotalLeafs , Operational_Activity , System , System__Operational_ActivityMainGroup , Operational_ActivityParent__Level ) .as ( [ Operational_ActivityParent , TotalLeafs , Operational_Activity , System , MainGroup , Level ] ) | Filter ( System__Operational_ActivityMainGroup \u003d\u003d [ \u0027Develop_Healthcare_Standards\u0027 ] ) | Filter ( Operational_ActivityParent__Level \u003d\u003d [ 3 ] ) | Join ( ( Operational_ActivityParent , inner.join , Operational_Activity ) , ( System , inner.join , Operational_Activity ) ) | Import ( ) ;Panel ( 0 ) | SetPanelView ( \u0027visualization\u0027 ) ;Select ( Operational_ActivityParent , 100 * ( UniqueCount ( Operational_Activity ) ) / TotalLeafs , ( UniqueCount ( Operational_Activity ) ) ) .as ( [ Operational_ActivityParent , TotalCoverage , AlignmentCount ] ) | Group ( Operational_ActivityParent ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00270\u0027 : { \u0027layout\u0027 : \u0027Grid\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027Operational_ActivityParent\u0027 , \u0027TotalCoverage\u0027 , \u0027AlignmentCount\u0027 ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.gridFullWidth\" ) ;Panel ( 0 ) | SetPanelLabel ( \"Coverage Percentages\" ) ;Panel ( 0 ) | Clone ( 1 ) ;Select ( Operational_ActivityParent , 100 * ( UniqueCount ( Operational_Activity ) ) / TotalLeafs ) .as ( [ Operational_ActivityParent , TotalCoverage ] ) | Group ( Operational_ActivityParent ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00271\u0027 : { \u0027layout\u0027 : \u0027Column\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027Operational_ActivityParent\u0027 ] , \u0027value\u0027 : [ \u0027TotalCoverage\u0027 ] } } } ) | Collect ( 500 ) ;Panel ( 1 ) | SetPanelSort ( cols \u003d [ \u0027TotalCoverage\u0027 ] , dirs \u003d [ \u0027desc\u0027 ] ) ;Select ( Operational_ActivityParent , 100 * ( UniqueCount ( Operational_Activity ) ) / TotalLeafs ) .as ( [ Operational_ActivityParent , TotalCoverage ] ) | Group ( Operational_ActivityParent ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00271\u0027 : { \u0027layout\u0027 : \u0027Column\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027Operational_ActivityParent\u0027 ] , \u0027value\u0027 : [ \u0027TotalCoverage\u0027 ] } } } ) | Collect ( 500 ) ;Panel ( 1 ) | SetPanelLabel ( \"Coverage Percentage Distributions\" ) ;Panel ( 0 ) | Clone ( 2 ) ;Panel ( 2 ) | SetPanelView ( \u0027visualization\u0027 ) ;Select ( System , Operational_Activity , Operational_ActivityParent ) .as ( [ System , Operational_Activity , Operational_ActivityParent ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00272\u0027 : { \u0027layout\u0027 : \u0027Grid\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027System\u0027 , \u0027Operational_Activity\u0027 , \u0027Operational_ActivityParent\u0027 ] } } } ) | Collect ( 500 ) ;Panel ( 2 ) | SetPanelLabel ( \"System Alignments\" ) ;Panel ( 0 ) | Clone ( 3 ) ;Select ( Operational_Activity , UniqueCount ( System ) ) .as ( [ Operational_Activity , UniqueCountofSystem ] ) | Group ( Operational_Activity ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \u00273\u0027 : { \u0027layout\u0027 : \u0027Column\u0027 , \u0027alignment\u0027 : { \u0027label\u0027 : [ \u0027Operational_Activity\u0027 ] , \u0027value\u0027 : [ \u0027UniqueCountofSystem\u0027 ] } } } ) | Collect ( 500 ) ;Panel ( 3 ) | SetPanelLabel ( \"Redundancy Counts\" ) ;"
}